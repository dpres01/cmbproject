<?php

namespace ZandooBundle\Repository;
use ZandooBundle\Entity\Annonce;
use ZandooBundle\Entity\Critere;

/**
 * AnnonceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnnonceRepository extends \Doctrine\ORM\EntityRepository
{
    public function findAnnonceByCritere($critere)
    {   
        $qb = $this->createQueryBuilder('a')
                ->addSelect('img','user')
                ->leftJoin('a.images', 'img')
                ->leftJoin('a.utilisateur', 'user')
                ->andWhere('a.actif = 1');
        $this->filtrerByCritere($critere, $qb);
         $qb->groupBy('a.id');
        //dump($qb->getQuery()->getResult(),$qb->getQuery()->getSQL());die;
        return  $qb->getQuery()->getResult();
    }
    // nb annonce dans la bdd 
    public function countAllAnnonce() {
        return $this->createQueryBuilder('a')->select('COUNT(a)')->getQuery() ->getSingleScalarResult();
    }
    
    private function filtrerByCritere ($critere,$qb){
        
        if(!is_null($critere->getPrixInf()) && !is_null($critere->getPrixSup()) ){
            $qb->andWhere($qb->expr()->between('a.prix', ':prixInf',':prixSup'));
            $qb->setParameters(array('prixInf'=> $critere->getPrixInf(),'prixSup'=>$critere->getPrixSup()));
           
        }
        if(!is_null($critere->getPrixInf()) && is_null($critere->getPrixSup()) ){
            $qb->andWhere($qb->expr()->gte('a.prix', ':prix'));
            $qb->setParameter(':prix', $critere->getPrixInf()); 
        }
        if(is_null($critere->getPrixInf()) && !is_null($critere->getPrixSup()) ){
            $qb->andWhere($qb->expr()->lte('a.prix', ':prix'));
            $qb->setParameter(':prix', $critere->getPrixSup()); 
        }
        if(!is_null($critere->getType())){
            $qb->andWhere($qb->expr()->eq('a.type', ':type'));
            $qb->setParameter(':type', $critere->getType()); 
        }
        if(!is_null($critere->getTitre())){
            $qb->andWhere($qb->expr()->like('lower(a.titre)', ':titre'));
            $qb->setParameter(':titre', '%'.strtolower($critere->getTitre()).'%'); 
        }
        if(!is_null($critere->getIdUtilisateur())){
            $qb->andWhere($qb->expr()->eq('a.utilisateur', ':id'));
            $qb->setParameter(':id', $critere->getIdUtilisateur()); 
        }
        if(!is_null($critere->getOffset())){
            $qb->setFirstResult($critere->getOffset())->setMaxResults(20); 
        }
        return $qb;
    }
    
}
